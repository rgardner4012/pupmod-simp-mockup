# Manual action to build, sign, and attach a release's RPMs
# ------------------------------------------------------------------------------
#
#             NOTICE: **This file is maintained with puppetsync**
#
# This file is updated automatically as part of a puppet module baseline.
#
# The next baseline sync will overwrite any local changes to this file!
#
# ==============================================================================
#
# This pipeline uses the following GitHub Action Secrets:
#
#   GitHub Secret variable               Notes
#   -------------------------------      ---------------------------------------
#   PUPPETFORGE_API_TOKEN
#   SIMP_CORE_REF_FOR_BUILDING_RPMS      simp-core ref (tag) to use to build
#                                        RPMs with `rake pkg:single`
#   SIMP_DEV_GPG_SIGNING_KEY             GPG signing key's secret key
#   SIMP_DEV_GPG_SIGNING_KEY_ID          User ID (name) of signing key
#   SIMP_DEV_GPG_SIGNING_KEY_PASSPHRASE  Passphrase to use GPG signing key
#
# ------------------------------------------------------------------------------
---
name: 'RELENG: Build + attach RPMs to GitHub Release'

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: "Release tag"
        required: true
      clobber:
        description: "Clobber assets? (default: no)"
        required: false
        default: no
      clean:
        description: "Wipe existing assets? (default: no)"
        required: false
        default: no
      dry_run:
        description: "Test build RPMs, but don't update Release (default: no)"
        required: false
        default: no
      target_repo:
        description: "Target repo (instead of this one)"
        required: false
      # FIXME:
      target_repo_token:
        description: "API token for uploading to target repo"
        required: false

env:
  TARGET_REPO: ${{ (github.event.inputs.target_repo != null && format('{0}/{1}', github.repository_owner, github.event.inputs.target_repo)) || github.repository }}
  RELEASE_TAG: ${{ github.event.inputs.release_tag }}
  DRY_RUN: ${{ github.event.inputs.dry_run }}

jobs:
  create-and-attach-rpms-to-github-release:
    name: Build and attach RPMs to Release
    runs-on: ubuntu-20.04
    env:
      target_repo_token: ${{ github.events.inputs.target_repo_token }}
    steps:
      - name: Query info for ${{ env.TARGET_REPO }} release ${{ github.event.inputs.release_tag }}
        id: release-api
        run: |
          echo "::warning ::TARGET_REPO: $TARGET_REPO"
          echo "::warning ::RELEASE_TAG: $RELEASE_TAG"

          if ! [[ "$TARGET_REPO" =~ ^[a-z0-9][a-z0-9-]+/[a-z0-9][a-z0-9_-]+$ ]]; then
            printf '::error ::Target repository name has invalid format: %s\n' "$TARGET_REPO"
            exit 88
          fi
          if ! [[ "$RELEASE_TAG" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-(rc|alpha|beta|pre)?([0-9]+)?)?$ ]]; then
            printf '::error ::Release Tag format is not SemVer or SemVer-ish RPM: %s\n' "$RELEASE_TAG"
            exit 88
          fi
          set -e -u -o pipefail
          api_url="${GITHUB_API_URL}/repos/${TARGET_REPO}/releases/tags/${RELEASE_TAG}"
          url="$(curl -H "Accept: application/vnd.github.v3+json" "$api_url" | jq -r .url)"
          assets_url="$(curl -H "Accept: application/vnd.github.v3+json" "$api_url" | jq -r .assets_url)"
          echo "::set-output name=url::${url}"
          echo "::set-output name=assets_url::${assets_url}"
          echo "::warning ::url: $url"
          echo "::warning ::assets_url: $assets_url"

      - name: Checkout code
        uses: actions/checkout@v2
        with:
          repository: ${{ env.TARGET_REPO }}
          ref: ${{ env.RELEASE_TAG }}
          clean: true
          fetch-depth: 0

      - name: 'Build & Sign RPMs for ${{ github.event.inputs.release_tag }} Release'
        # FIXME don't stay on @main unless testing; switch to @v? before release
        uses: simp/github-action-build-and-sign-pkg-single-rpm@main
        id: build-and-sign-rpm
        with:
          gpg_signing_key: ${{ secrets.SIMP_DEV_GPG_SIGNING_KEY }}
          gpg_signing_key_id: ${{ secrets.SIMP_DEV_GPG_SIGNING_KEY_ID }}
          gpg_signing_key_passphrase: ${{ secrets.SIMP_DEV_GPG_SIGNING_KEY_PASSPHRASE }}
          simp_core_ref_for_building_rpms: ${{ secrets.SIMP_CORE_REF_FOR_BUILDING_RPMS }}

      - name: Upload RPM file(s) to GitHub Release
        id: upload_rpm_assets
        env:
          GITHUB_TOKEN: ${{ github.event.inputs.target_repo_token || secrets.GITHUB_TOKEN }}
          rpm_file_paths: ${{ steps.build-and-sign-rpm.outputs.rpm_file_paths }}
          rpm_gpg_file: ${{ steps.build-and-sign-rpm.outputs.rpm_gpg_file }}
          upload_url: ${{ steps.release-api.outputs.assets_url }}
          asset_content_type: application/octet-stream
        run: |
          echo "::add-mask::$GITHUB_TOKEN"
          curl_cmd=(curl -X POST --fail --show-error \
            --header "Accept: application/vnd.github.v3+json" \
            --header "Authorization: token ${GITHUB_TOKEN:-default_content_to_cause_error}" \
          )
          files=(${rpm_file_paths})
          echo "== RPM files to upload: ${#files[@]}"
          echo "== GPG file to upload: ${rpm_gpg_file}"

          echo "-- curl_cmd: '${curl_cmd[@]}'"
          gpg_upload_cmd=("${curl_cmd[@]}" "${upload_url}?name=$(basename "$rpm_gpg_file")" \
            --header application/pgp-keys --data-binary "@${rpm_gpg_file}" \
          )
          echo "+-- $gpg_upload_cmd: '${gpg_upload_cmd[@]}'"

          if [[ $DRY_RUN == 'yes' ]]; then
            echo "::warning :: :warning: Dry run enabled: SKIP uploading artifacts"
          fi
          # -------------------------------------------------------------------

          "${gpg_upload_cmd[@]}"
          #upload_reponse_body="$("${gpg_upload_cmd[@]}")"
          #echo "$upload_reponse_body | jq ."

          for file in "${files[@]}"; do
            echo "-- $file"
            if [ ! -f "$file" ]; then
              printf '::error ::No file found at $file (got "%s")!\n' "$file"
              exit 88
            fi
            rpm -qip "$file" || { echo '::error ::Error reading RPM info from $file'; exit 88; }
            file_name="$(basename "$file")"
            file_upload_cmd=${}
            upload_reponse_body="$("${curl_cmd[@]}?name=$(basename "$rpm_gpg_file")" \
              --header "Content-Type: ${asset_content_type}"
              --header "Authorization: token ${GITHUB_TOKEN:-default_content_to_cause_error}" \
            )"
            echo "$upload_reponse_body | jq ."
          done
